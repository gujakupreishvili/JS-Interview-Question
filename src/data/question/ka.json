[
  {
    "id": 1,
    "question": "რა არის react.js ?",
    "answer": "React არის ჯავასკრიპტის ბიბლიოეთეკა რომელიც გამოიყენება კომპონენტებზე დაფუძნებული მომხმარებლის ინტერფეისების შესაქმნელად. ის გამოიყენება ვებსაიტებისა და მობილური აპლიკაციების ვიზუალური ფენის (view layer) სამართავად და საშუალებას აძლევს დეველოპერებს შექმნან მრავალჯერადი გამოყენების UI კომპონენტები და ეფექტურად მართონ მათი მდგომარეობა (state). React შექმნა ჯორდან უოლკმა — პროგრამულმა ინჟინერმა Facebook-ში (ახლა Meta). პირველად იგი დაინერგა Facebook-ის News Feed-ზე 2011 წელს, ხოლო Instagram-ზე — 2012 წელს. ბიბლიოთეკა ღია კოდად გამოვიდა 2013 წლის მაისში და მას შემდეგ გახდა ერთ-ერთი ყველაზე პოპულარული JavaScript ბიბლიოთეკა თანამედროვე მომხმარებლის ინტერფეისების შესაქმნელად."
  },
  {
    "id": 2,
    "question": "რა არის React-ის ევოლუციის ისტორია?",
    "answer": "React პირველად გამოუშვა Facebook-მა 2013 წელს, რათა გადაეჭრა რთულ UI-ებში წარმადობისა და კოდის მართვის პრობლემები. მან შემოიტანა დეკლარატიული UI მიდგომა, კომპონენტებზე დაფუძნებული არქიტექტურა და ვირტუალური DOM, რაც განახლებებს უფრო სწრაფსა და ეფექტურს ხდიდა.2014 – ვირტუალური DOM-ის პოპულარიზაცია: რეალურ DOM-ში ცვლილებების მინიმიზაცია.2016 – React 15: წარმადობისა და რენდერის გაუმჯობესება.2017 – React 16 (Fiber): ახალი ბირთვი, უფრო გლუვი განახლებები, შეცდომების უკეთესი დამუშავება, Fragments-ის დამატება.2019 – Hooks: ფუნქციურ კომპონენტებში მდგომარეობისა და გვერდითი ეფექტების გამოყენება კლასების გარეშე.2022 – React 18: კონკურენტული რენდერი და ავტომატური batching, უკეთესი რეაგირება UI-ზე.დღეს React-ს აქვს უზარმაზარი ეკოსისტემა და გამოიყენება არა მხოლოდ ვებში, არამედ მობილურ, დესკტოპ და VR აპლიკაციებშიც."
  },
  {
    "id": 3,
    "question": "რა არის JSX რეაქტში ?",
    "answer": "JSX არის რეაქტსითვის შექმნილი სინტაქსური გაფართოება, რომელიც საშუალებას გაძლევს HTML-ის მზგავსი კოდი დაწერო პირდაპირ Javascript-ის შიგნით  JSX კომპონენტს აღწერს, როგორც HTML, მაგრამ ეს სინტაქსი სინამდვილეში JavaScript ფუნქციებად იქცევა. JSX ზუსტად აღწერს, თუ როგორ უნდა გამოიყურებოდეს UI ნაწილი, და React ამ ინფორმაციის საფუძველზე ქმნის ვირტუალურ DOM-ს.ეს აადვილებს UI კომპონენტების შექმნას და კოდის წაკითხვას."
  },
  {
    "id": 4,
    "question": "რა განსხვავებაა ელემენტსა და კომპონენტს შორის ",
    "answer": "ელემენტი არის უბრალო ობიექტები , რომლებიც აღწერენ  UI-ს ნაწილებს . კომპონენტი ეს არის ლოგიკის ერთეული რომლებიც ქმნიან და მართავენ ელემენტებს  "
  },
  {
    "id": 5,
    "question": "როგორ შევქმნათ კომპონენტი რეაქტში ?",
    "answer": "რეაქტში კომპონენტის შექმნა შეგვიძლია ორი გზით. პირველი გზა ეს არის ფუნქიური კომპონენტი მისი სინტაქსია: \n  function greeting(props){\n return <h1>გამარჯობა, {props.name}!</h1> \n } \n მეორე გზა ეს არის კლას კომპონენტი ,რომელიც არის ძველი სტილი ის ნაკლებად გამოიყენება ახლა. მას უნად ჰქონდეს  React.Component-ზე გაფართოება და ასევე render() მეთოდი , რომელიც აბრუნებს JSX. კლას კომპონენტის სინტაქსი: \n class Greeting extends React.Component { \n render{\n return <h1>გამარჯობა, {this.props.name}!</h1>; \n } \n } "
  },
  {
    "id":6,
    "question":"როდის უნდა გამოიყენო Class Component ფუნქციური კომპონენტის ნაცვლად?",
    "answer":"React-ში Hooks-ის დამატების შემდეგ (ანუ React 16.8 ვერსიიდან), ყოველთვის რეკომენდებულია ფუნქციური კომპონენტების გამოყენება Class კომპონენტების ნაცვლად.ეს იმიტომ, რომ ახლა ფუნქციურ კომპონენტშიც შეგვიძლია გამოვიყენოთ state, lifecycle მეთოდები და სხვა შესაძლებლობები, რომლებიც ადრე მხოლოდ Class კომპონენტებში იყო ხელმისაწვდომი. თუმცა მაინც არსებობს ორი მიზეზი, რის გამოც შეიძლება Class კომპონენტის გამოყენება:\n 1)თუ გჭირდება React-ის ისეთი შესაძლებლობა, რომლის ფუნქციური კომპონენტის ანალოგი ჯერ არ არსებობს, მაგალითად Error Boundaries. \n 2)ძველ ვერსიებში, თუ კომპონენტს სჭირდებოდა state ან lifecycle მეთოდები, მაშინ აუცილებელი იყო Class კომპონენტის გამოყენება."
  },
  {
    "id":7,
    "question":"რა არის pure component?",
    "answer": "pure component-ი არის ისეთი კომპონენტი რომელიც ერთსა და იმავე state და prop-სზე ერთნაირ შედეგეს აბრუნებს. ფუნქციურ კომპონენტში ეს შეიძლება განხსორციელდეს React.memo() api-ის საშალებით, რომელსაც კომპონენტს შემოახვევთ.React.memo()თავიდან იცილებს ზედმეტ გადახატვას (re-render)-ს რადგან ადარებს ძველ და ახალ (props)-ებს Shallow comparison მიხედვით "
  },
  {
    "id":8,
    "question":"რა არის State-ი React-ში ?",
    "answer":" State კომპონენტის მდგომარეობაა -ობიექტი,რომელიც  ინახავს ისეთ ინფორმაციას , რაც კომპონენტის არსებობის განმავლობაში შეიძლება შეიცვალოს, მთავარი იდეა ის არის, რომ როცა State ობიექტი იცვლება კომპონენტი თავიდან გადაიხატება(re-render) ყოველთვის კოდის წერის დროს მთავარი მიზანი არის ის რომ სთეითი იყოს მაქსიმალურად მარტივი და კომპონენტებში მისი გამოყენება მინიმუმამდე დავიყვანოთ. State არის მზაგვსი props-ის მაგრამ  განსხვავებით props ის კონტროლება  მხოლოდ არსებულ კომპონენტში სანამ თავად ჩვენ არ გავატანთ სხვა კომპონენტს მის მნიშნველობას მანამდე არ ექნება სხვა კომპონეტნს მასზე წვდომდა  "
  },
  {
    "id":9,
    "question":"რა არის props-ი  React-ში ?",
    "answer":"props-სი React-ში არის ობიექტი რომელიც, ინახავს მონაცემებს და ფუნქციებს, რომელიც მშობელი კომპონენტიდან გადაეცემა შვილობილ კომპონენტს"
  },
  {
    "id":10,
    "question":"რა განსხვავება State და Props შორის ?",
    "answer":"State და Props React-ში ორივე მონაცემის გადასაცემად გამოიყენება, მაგრამ მათ აქვთ განსხვავებები, ერთ ერთი მთავარი განსხვავება ის არის რომ , State არის კომპონენტის შიდა, ცვალებადი მონაცემები. ხოლო  Props არის გარე, უცვლელი მონაცემები, რომლებიც მოდის მშობლისგან."
  },
  {
    "id":11,
    "question":"რა არის React event handling ?",
    "answer":"React event handling-ის საშუალებით ჩვენ React კომპონენტში ვამუშავებთ მოვლენებს-(event-ებს). React-ს აქვს თავისი event სისტემა , რომელიც ეყრდნობა SyntheticEvent-ს ეს არის ბრაუზერის Event ობიექტის cross-browser ვერსია, რომელიც ყველა ბრაუზერში ერთნაირად მუშაობს, მოვლენების(event-ების) დამუშავებისთვის კომპონენტს გადასცემ ფუნქციას  რომელიც გაეშვება მაშინ როცა ეს ფუნქცია მოხდება  ატრიბუტები camelCase ფორმატში იწერება (მაგ. onClick, onChange, onSubmit)."
  },
  {
    "id":12,
    "question":" რა არის inline conditional expressions React-ში?",
    "answer":"Inline conditional expressions არის პირობითი გამოსახულებები, რომლებიც პირდაპირ JSX-ის შიგნით იწერება, რათა გარკვეული ელემენტები  ან კომპონენტები გამოჩნდეს კონკრეტული პირობის შესრულების შემდეგ  ეს საშუალებს გვაძლევს რომ არ გავაკეთოთ ცალკე  if ბლოკები  JSX გარეთ არამედ პირობა ჩავსვათ პირდაპირ retunr-ში"
  }
]
