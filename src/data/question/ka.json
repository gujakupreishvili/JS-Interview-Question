[
  {
    "id": 1,
    "question": "რა არის react.js ?",
    "answer": "React არის ჯავასკრიპტის ბიბლიოეთეკა რომელიც გამოიყენება კომპონენტებზე დაფუძნებული მომხმარებლის ინტერფეისების შესაქმნელად. ის გამოიყენება ვებსაიტებისა და მობილური აპლიკაციების ვიზუალური ფენის (view layer) სამართავად და საშუალებას აძლევს დეველოპერებს შექმნან მრავალჯერადი გამოყენების UI კომპონენტები და ეფექტურად მართონ მათი მდგომარეობა (state). React შექმნა ჯორდან უოლკმა — პროგრამულმა ინჟინერმა Facebook-ში (ახლა Meta). პირველად იგი დაინერგა Facebook-ის News Feed-ზე 2011 წელს, ხოლო Instagram-ზე — 2012 წელს. ბიბლიოთეკა ღია კოდად გამოვიდა 2013 წლის მაისში და მას შემდეგ გახდა ერთ-ერთი ყველაზე პოპულარული JavaScript ბიბლიოთეკა თანამედროვე მომხმარებლის ინტერფეისების შესაქმნელად."
  },
  {
    "id": 2,
    "question": "რა არის React-ის ევოლუციის ისტორია?",
    "answer": "React პირველად გამოუშვა Facebook-მა 2013 წელს, რათა გადაეჭრა რთულ UI-ებში წარმადობისა და კოდის მართვის პრობლემები. მან შემოიტანა დეკლარატიული UI მიდგომა, კომპონენტებზე დაფუძნებული არქიტექტურა და ვირტუალური DOM, რაც განახლებებს უფრო სწრაფსა და ეფექტურს ხდიდა.2014 – ვირტუალური DOM-ის პოპულარიზაცია: რეალურ DOM-ში ცვლილებების მინიმიზაცია.2016 – React 15: წარმადობისა და რენდერის გაუმჯობესება.2017 – React 16 (Fiber): ახალი ბირთვი, უფრო გლუვი განახლებები, შეცდომების უკეთესი დამუშავება, Fragments-ის დამატება.2019 – Hooks: ფუნქციურ კომპონენტებში მდგომარეობისა და გვერდითი ეფექტების გამოყენება კლასების გარეშე.2022 – React 18: კონკურენტული რენდერი და ავტომატური batching, უკეთესი რეაგირება UI-ზე.დღეს React-ს აქვს უზარმაზარი ეკოსისტემა და გამოიყენება არა მხოლოდ ვებში, არამედ მობილურ, დესკტოპ და VR აპლიკაციებშიც."
  },
  {
    "id": 3,
    "question": "რა არის JSX რეაქტში ?",
    "answer": "JSX არის რეაქტსითვის შექმნილი სინტაქსური გაფართოება, რომელიც საშუალებას გაძლევს HTML-ის მზგავსი კოდი დაწერო პირდაპირ Javascript-ის შიგნით  JSX კომპონენტს აღწერს, როგორც HTML, მაგრამ ეს სინტაქსი სინამდვილეში JavaScript ფუნქციებად იქცევა. JSX ზუსტად აღწერს, თუ როგორ უნდა გამოიყურებოდეს UI ნაწილი, და React ამ ინფორმაციის საფუძველზე ქმნის ვირტუალურ DOM-ს.ეს აადვილებს UI კომპონენტების შექმნას და კოდის წაკითხვას."
  },
  {
    "id": 4,
    "question": "რა განსხვავებაა ელემენტსა და კომპონენტს შორის ",
    "answer": "ელემენტი არის უბრალო ობიექტები , რომლებიც აღწერენ  UI-ს ნაწილებს . კომპონენტი ეს არის ლოგიკის ერთეული რომლებიც ქმნიან და მართავენ ელემენტებს  "
  },
  {
    "id": 5,
    "question": "როგორ შევქმნათ კომპონენტი რეაქტში ?",
    "answer": "რეაქტში კომპონენტის შექმნა შეგვიძლია ორი გზით. პირველი გზა ეს არის ფუნქიური კომპონენტი მისი სინტაქსია: \n  function greeting(props){\n return <h1>გამარჯობა, {props.name}!</h1> \n } \n მეორე გზა ეს არის კლას კომპონენტი ,რომელიც არის ძველი სტილი ის ნაკლებად გამოიყენება ახლა. მას უნად ჰქონდეს  React.Component-ზე გაფართოება და ასევე render() მეთოდი , რომელიც აბრუნებს JSX. კლას კომპონენტის სინტაქსი: \n class Greeting extends React.Component { \n render{\n return <h1>გამარჯობა, {this.props.name}!</h1>; \n } \n } "
  }
]
